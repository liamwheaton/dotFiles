#
#  React snippets
#

snippet cs "React.addons.classSet" b
var cx = React.addons.classSet;
endsnippet

snippet cdm "component did mount" b
componentDidMount: function() {
	${1}
},$0
endsnippet

snippet cdup "component did update" b
componentDidUpdate: function(prevProps, prevState) {
	${1}
},$0
endsnippet

snippet cwm "component will mount" b
componentWillMount: function() {
	${1}
},$0
endsnippet

snippet cwr "component will receive props" b
componentWillReceiveProps: function(nextProps) {
	${1}
},$0
endsnippet

snippet cwun "component will unmount" b
componentWillUnmount: function() {
	${1}
},$0
endsnippet

snippet cwu "component will update" b
componentWillUpdate: function(nextProps, nextState) {
	${1}
},$0
endsnippet

snippet cx
cx({
	${1}: ${2}
});
endsnippet

snippet fup
forceUpdate(${1:callback});
endsnippet

snippet gdp "get default props" b
getDefaultProps: function() {
	return {
		${1}
	};
},$0
endsnippet

snippet gis "get initial state" b
getInitialState: function() {
	return {
		${1}: ${2}
	};
},$0
endsnippet

snippet ism "is mounted"
isMounted()
endsnippet

snippet jsx "define jsx dom" b
/**
 * @jsx React.DOM
 */
endsnippet

snippet ptypes "propTypes" b
propTypes: {
	${1}: React.PropTypes.${2:string}
},
endsnippet

snippet ctypes "contextTypes" b
contextTypes: {
	${2}
},
endsnippet

snippet rcc "create class/component" b
var ${1:ClassName} = React.createClass({

	render: function() {
		return (
			${VISUAL}$3
		);
	}

});
$0
${2:module.exports = $1;}
endsnippet

snippet me "module exports" b
module.exports = $0;	
endsnippet

snippet ren
render: function() {
	return (
		${1:<div />}
	);
}$0
endsnippet

snippet sst "set state" b
this.setState({
	${1}: ${2}
});$0
endsnippet

snippet scu "should component update"
shouldComponentUpdate: function(nextProps, nextState) {
	${1}
},$0
endsnippet

snippet props "get property" i
this.props.${1}
endsnippet

snippet state "get state" i
this.state.${1}
endsnippet

snippet trp
this.transferPropsTo(${VISUAL}$0);
endsnippet

snippet const
const ${1} = ${0};
endsnippet
snippet let
let ${1} = ${0};
endsnippet
snippet im
import ${1} from '${0}';
endsnippet
snippet cla
class ${1} {
	${0}
}
endsnippet
snippet clax
class ${1} extends ${2} {
	${0}
}
endsnippet
snippet clac
class ${1} {
	constructor(${2}) {
		${0}
	}
}
endsnippet
# For of loop
snippet foro
for (let ${1:prop} of ${2:object}) {
	${0:$1}
}
endsnippet
# Generator
snippet fun*
function* ${1:function_name}(${2}) {
	${0}
}
endsnippet
snippet c=>
const ${1:function_name} = (${2}) => {
	${0}
}
endsnippet
snippet caf
const ${1:function_name} = (${2}) => {
	${0}
}
endsnippet
snippet =>
(${1}) => {
	${0}
}
endsnippet
snippet af
(${1}) => {
	${0}
}
endsnippet

snippet sym
const ${1} = Symbol('${0}');
endsnippet

snippet ed
export default ${0}
endsnippet

snippet ${
${${1}}${0}
endsnippet

# Functions
# prototype
snippet proto
${1:class_name}.prototype.${2:method_name} = function(${3}) {
	${0}
};
endsnippet
# Function
snippet fun
function ${1:function_name}(${2}) {
	${0}
}
endsnippet
# Anonymous Function
snippet f "" w
function(${1}) {
	${0}
}
endsnippet
# Anonymous Function assigned to variable
snippet vaf "" w
var ${1:function_name} = function(${2}) {
	${0}
};
endsnippet
# Function assigned to variable
snippet vf
var ${1:function_name} = function $1(${2}) {
	${0}
};
endsnippet
# Immediate function
snippet (f
(function(${1}) {
	${0}
}(${2}));
endsnippet
# Minify safe iife
snippet ;fe
;(function(${1}) {
	${0}
}(${2}))
endsnippet
# self-defining function
snippet sdf
var ${1:function_name} = function (${2:argument}) {
	${3}

	$1 = function ($2) {
		${0}
	};
};
endsnippet
# Flow control
# if
snippet if
if (${1:true}) {
	${0}
}
endsnippet
# if ... else
snippet ife
if (${1:true}) {
	${2}
} else {
	${0}
}
endsnippet
# tertiary conditional
snippet ter
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet
# switch
snippet switch
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet
# case
snippet case
case '${1:case}':
	${2}
	break;
${0}
endsnippet
# try
snippet try
try {
	${1}
} catch (${2:e}) {
	${0:/* handle error */}
}
endsnippet
# try finally
snippet tryf
try {
	${1}
} catch (${2:e}) {
	${0:/* handle error */}
} finally {
	${3:/* be executed regardless of the try / catch result*/}
}
endsnippet
# throw Error
snippet terr
throw new Error('${1:error message}')
endsnippet
# return
snippet ret
return ${0:result};
endsnippet
# for loop
snippet for
for (var ${2:i} = 0; $2 < ${1:arr}.length; $2++) {
	
}
endsnippet
# Reversed for loop
snippet forr
for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2--) {
	var ${3:v} = $1[$2];${0:}
}
endsnippet
# While loop
snippet wh
while (${1:/* condition */}) {
	${0}
}
endsnippet
# Do while loop
snippet do
do {
	${0}
} while (${1:/* condition */});
endsnippet
# For in loop
snippet fori
for (var ${1:prop} in ${2:object}) {
	${0:$2[$1]}
}
endsnippet
# Objects
# Object Method
snippet :f
${1:method_name}: function (${2:attribute}) {
	${3}
},
endsnippet
# hasOwnProperty
snippet has
hasOwnProperty(${0})
endsnippet
# singleton
snippet sing
function ${1:Singleton} (${2:argument}) {
	// the cached instance
	var instance;

	// rewrite the constructor
	$1 = function $1($2) {
		return instance;
	};

	// carry over the prototype properties
	$1.prototype = this;

	// the instance
	instance = new $1();

	// reset the constructor pointer
	instance.constructor = $1;

	${0}

	return instance;
}
endsnippet
# Crockford's object function
snippet obj
function object(o) {
	function F() {}
	F.prototype = o;
	return new F();
}
endsnippet
# Define multiple properties
snippet objprops
var ${1:my_object} = Object.defineProperties(
	${2:new Object()},
	{
		${3:property} : {
			get : function $1_$3_getter() {
				// getter code
			},
			set : function $1_$3_setter(value) {
				// setter code
			},
			value        : ${4:value},
			writeable    : ${5:boolean},
			enumerable   : ${6:boolean},
			configurable : ${0:boolean}
		}
	}
);
endsnippet
# Define single property
snippet prop
Object.defineProperty(
	${1:object},
	'${2:property}',
	{
		get : function $1_$2_getter() {
			// getter code
		},
		set : function $1_$2_setter(value) {
			// setter code
		},
		value        : ${3:value},
		writeable    : ${4:boolean},
		enumerable   : ${5:boolean},
		configurable : ${0:boolean}
	}
);
endsnippet
# Documentation
# docstring
snippet /**
/**
 * ${0:description}
 *
**/
endsnippet
snippet @par
@param {${1:type}} ${2:name} ${0:description}
endsnippet
snippet @ret
@return {${1:type}} ${0:description}
endsnippet
# JSON

# JSON.parse
snippet jsonp
JSON.parse(${0:jstr});
endsnippet
# JSON.stringify
snippet jsons
JSON.stringify(${0:object});
endsnippet
# DOM selectors
# Get elements
snippet get
getElementsBy${1:TagName}('${0}')
endsnippet
# Get element
snippet gett
getElementBy${1:Id}('${0}')
endsnippet
# Elements by class
snippet by.
${1:document}.getElementsByClassName('${0:class}')
endsnippet
# Element by ID
snippet by#
${1:document}.getElementById('${0:element ID}')
endsnippet
# Query selector
snippet qs
${1:document}.querySelector('${0:CSS selector}')
endsnippet
# Query selector all
snippet qsa
${1:document}.querySelectorAll('${0:CSS selector}')
endsnippet
# Debugging
snippet de
debugger;
endsnippet
# console.log
snippet cl
console.log(${0});
endsnippet
# console.debug
snippet cd
console.debug(${0});
endsnippet
# console.error
snippet ce
console.error(${0});
endsnippet
# console.warn
snippet cw
console.warn(${0});
endsnippet
# console.info
snippet ci
console.info(${0});
endsnippet
# console.trace
snippet ct
console.trace(${0:label});
endsnippet
# console.time
snippet ctime
console.time(${0:label});
endsnippet
# console.assert
snippet ca
console.assert(${1:expression}, ${0:obj});
endsnippet
# console.dir
snippet cdir
console.dir(${0:obj});
endsnippet
# Misc
# 'use strict';
snippet us
'use strict';
endsnippet
# setTimeout function
snippet timeout
setTimeout(function () {${0}}${2}, ${1:10});
endsnippet

snippet < "<>" w
<${1:div}>${0}</$1>
endsnippet

snippet <. "<> with class" w
<${1:div} `!p snip.rv=' class="' if t[2] else ""`${2:name}`!p snip.rv = '"' if t[2] else ""`>
	${0:${VISUAL}}
</$1>
endsnippet

snippet <# "<> with id and class" w
<${1:div} `!p snip.rv=' id="' if t[2] else ""`${2:name}`!p snip.rv = '"' if t[2] else ""``!p snip.rv=' class="' if t[3] else ""`${3:name}`!p snip.rv = '"' if t[3] else ""`>
	${0:${VISUAL}}
</$1>
endsnippet

snippet </ "self closing element" w
<${1:div} />
endsnippet

snippet </. "self closing element with class" w
<${1:div} `!p snip.rv=' class="' if t[2] else ""`${2:name}`!p snip.rv = '"' if t[2] else ""` />
endsnippet

snippet </# "self closing element with id and class" w
<${1:div} `!p snip.rv=' id="' if t[2] else ""`${2:name}`!p snip.rv = '"' if t[2] else ""``!p snip.rv=' class="' if t[3] else ""`${3:name}`!p snip.rv = '"' if t[3] else ""` />
endsnippet

snippet <.. "react <> with attribute" w
<${1:div} ${2:attribute}`!p snip.rv= '=' if t[2] else ""`${3:name}>
	${0:${VISUAL}}
</$1>
endsnippet

snippet </.. "react self closing element with className" w
<${1:div} ${2:attribute}`!p snip.rv='=' if t[2] else ""`${3:name} />
endsnippet

snippet req "require" w
var ${1:name} = require('${2:requirement}');
endsnippet
